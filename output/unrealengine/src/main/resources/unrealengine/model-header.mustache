{{>licenseInfo}}
{{#models}}{{#model}}
#pragma once

#include "{{#jsonUtilsPath}}{{{jsonUtilsPath}}}{{/jsonUtilsPath}}SerializeableModelBase.h"
{{#imports}}
{{#this}}{{{this}}}{{/this}}
{{/imports}}

{{#modelNamespaceDeclarations}}
namespace {{this}}
{
{{/modelNamespaceDeclarations}}
	/// <summary>
	/// {{description}}
	/// </summary>
	class {{#exportTypeMacro}}{{{exportTypeMacro}}} {{/exportTypeMacro}}{{classname}} : public Utils::SerializeableModelBase
	{
	public:
		{{classname}}();
		virtual ~{{classname}}();

		{{#vars}}
		/// <summary>
		/// {{description}}
		/// </summary>
		{{{datatype}}} {{name}};

		{{/vars}}

		virtual void FromJsonObject(TSharedPtr<FJsonObject> JsonObject) override;

		virtual TSharedRef<FJsonObject> ToJsonObject() const override;

		virtual FString GetModelName() const override;
	};

	bool {{#exportTypeMacro}}{{{exportTypeMacro}}} {{/exportTypeMacro}}operator==(const {{classname}}& left, const {{classname}}& right);
	bool {{#exportTypeMacro}}{{{exportTypeMacro}}} {{/exportTypeMacro}}operator!=(const {{classname}}& left, const {{classname}}& right);
{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
