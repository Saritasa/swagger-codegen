{{>licenseInfo}}
{{#models}}{{#model}}

#include "{{#apiModelsPath}}{{{apiModelsPath}}}{{/apiModelsPath}}{{classname}}.h"
#include "{{#jsonUtilsPath}}{{{jsonUtilsPath}}}{{/jsonUtilsPath}}JsonSerializer_.h"
{{#defaultInclude}}#include "{{{defaultInclude}}}"{{/defaultInclude}}

{{#modelNamespaceDeclarations}}
namespace {{this}}
{
{{/modelNamespaceDeclarations}}

	using namespace Utils;

	{{classname}}::{{classname}}()
	{
		{{#vars}}
		{{#required}}
		{{#defaultValue}}
		{{name}} = {{{defaultValue}}};
		{{/defaultValue}}
		{{^defaultValue}}
		{{/defaultValue}}
		{{/required}}
		{{/vars}}
	}

	{{classname}}::~{{classname}}()
	{
	}

	void {{classname}}::FromJsonObject(TSharedPtr<FJsonObject> JsonObject)
	{
		JsonSerializer serializer;
		{{#vars}}
		serializer.GetJsonFieldAsArgumentType(JsonObject, "{{baseName}}", {{name}});
		{{/vars}}
	}

	TSharedRef<FJsonObject> {{classname}}::ToJsonObject() const
	{
		auto ret = MakeShared<FJsonObject>();
		JsonSerializer serializer;
		{{#vars}}
		serializer.SetJsonField(ret, "{{baseName}}", {{name}}{{^vendorExtensions.x-nullable}}{{^required}}, SerializeEmptyFieldBehaviour::Skip{{/required}}{{/vendorExtensions.x-nullable}});
		{{/vars}}
		return ret;
	}

	FString {{classname}}::GetModelName() const
	{
		return TEXT("{{classname}}");
	}

	bool operator==(const {{classname}}& left, const {{classname}}& right)
	{
		return
		{{#vars}}
			left.{{name}} == right.{{name}}{{#hasMore}} &&{{/hasMore}}{{^hasMore}};{{/hasMore}}
		{{/vars}}
	}

	bool operator!=(const {{classname}}& left, const {{classname}}& right)
	{
		return !(left == right);
	}
{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
