{{>licenseInfo}}
{{#models}}{{#model}}

#include "{{classname}}.h"

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}::{{classname}}()
{
    {{#vars}}
    {{#required}}
    {{#defaultValue}}
    {{name}} = {{{defaultValue}}};
    {{/defaultValue}}
    {{/required}}
    {{/vars}}
}

{{classname}}::~{{classname}}()
{
}

void {{classname}}::FromJsonObject(TSharedPtr<FJsonObject> JsonObject)
{
        JsonSerializer serializer;
        {{#vars}}
        serializer.GetJsonFieldAsArgumentType(JsonObject, "{{baseName}}", {{name}});
        {{/vars}}
}

TSharedRef<FJsonObject> {{classname}}::ToJsonObject(const Trivver::JsonSerializingContext& Context) const
{
        auto ret = MakeShared<FJsonObject>();
		JsonSerializer serializer(Context);
		{{#vars}}
		serializer.SetJsonField(ret, "{{baseName}}", {{name}});
		{{/vars}}
		return ret;
}

FString {{classname}}::GetModelName() const
{
    return TEXT("{{classname}}");
}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
